{"version":3,"file":"spa-DUnmNocp.js","sources":["../../src/utils/spa.ts"],"sourcesContent":["/*\nCopyright 2024 New Vector Ltd.\n\nSPDX-License-Identifier: AGPL-3.0-only\nPlease see LICENSE in the repository root for full details.\n*/\n\nimport { ICreateClientOpts } from \"matrix-js-sdk/src/client\";\nimport { MatrixError } from \"matrix-js-sdk/src/http-api\";\nimport { logger } from \"matrix-js-sdk/src/logger\";\n\nimport { Config } from \"../config/Config\";\nimport { fallbackICEServerAllowed, initClient } from \"./matrix\";\nimport type { InitResult, Session } from \"../ClientContext\";\n\nexport async function initSPA(\n  loadSession: () => Session | undefined,\n  clearSession: () => void,\n): Promise<InitResult | null> {\n  // We're running as a standalone application\n  try {\n    const session = loadSession();\n    if (!session) {\n      logger.log(\"No session stored; continuing without a client\");\n      return null;\n    }\n\n    logger.log(\"Using a standalone client\");\n\n    /* eslint-disable camelcase */\n    const { user_id, device_id, access_token, passwordlessUser } = session;\n    const initClientParams: ICreateClientOpts = {\n      baseUrl: Config.defaultHomeserverUrl()!,\n      accessToken: access_token,\n      userId: user_id,\n      deviceId: device_id,\n      fallbackICEServerAllowed,\n      livekitServiceURL: Config.get().livekit?.livekit_service_url,\n    };\n\n    try {\n      const client = await initClient(initClientParams, true);\n      return {\n        widgetApi: null,\n        client,\n        passwordlessUser,\n      };\n    } catch (err) {\n      if (err instanceof MatrixError && err.errcode === \"M_UNKNOWN_TOKEN\") {\n        // We can't use this session anymore, so let's log it out\n        logger.log(\n          \"The session from local store is invalid; continuing without a client\",\n        );\n        clearSession();\n        // returning null = \"no client` pls register\" (undefined = \"loading\" which is the current value when reaching this line)\n        return null;\n      }\n      throw err;\n    }\n  } catch (err) {\n    clearSession();\n    throw err;\n  }\n}\n"],"names":["initSPA","loadSession","clearSession","session","logger","user_id","device_id","access_token","passwordlessUser","initClientParams","Config","fallbackICEServerAllowed","_a","initClient","err","MatrixError"],"mappings":"iHAesB,eAAAA,EACpBC,EACAC,EAC4B,OAExB,GAAA,CACF,MAAMC,EAAUF,EAAY,EAC5B,GAAI,CAACE,EACH,OAAAC,EAAO,IAAI,gDAAgD,EACpD,KAGTA,EAAO,IAAI,2BAA2B,EAGtC,KAAM,CAAE,QAAAC,EAAS,UAAAC,EAAW,aAAAC,EAAc,iBAAAC,CAAqB,EAAAL,EACzDM,EAAsC,CAC1C,QAASC,EAAO,qBAAqB,EACrC,YAAaH,EACb,OAAQF,EACR,SAAUC,EACV,yBAAAK,EACA,mBAAmBC,EAAAF,EAAO,IAAI,EAAE,UAAb,YAAAE,EAAsB,mBAC3C,EAEI,GAAA,CAEK,MAAA,CACL,UAAW,KACX,OAHa,MAAMC,EAAWJ,EAAkB,EAAI,EAIpD,iBAAAD,CACF,QACOM,EAAK,CACZ,GAAIA,aAAeC,GAAeD,EAAI,UAAY,kBAEzC,OAAAV,EAAA,IACL,sEACF,EACaF,EAAA,EAEN,KAEH,MAAAY,CAAA,QAEDA,EAAK,CACC,MAAAZ,EAAA,EACPY,CAAA,CAEV"}